/**
 * Simple object check.
 * @param item
 * @returns {boolean}
 */
function isObject(item) {
    return (item && typeof item === 'object' && !Array.isArray(item));
}

/**
 * Deep merge two objects.
 * @param target
 * @param ...sources
 */
function mergeDeep(target, ...sources) {
    if (!sources.length) return target;
    const source = sources.shift();

    if (isObject(target) && isObject(source)) {
        for (const key in source) {
            if (isObject(source[key])) {
                if (!target[key]) Object.assign(target, {[key]: {}});
                mergeDeep(target[key], source[key]);
            } else {
                Object.assign(target, {[key]: source[key]});
            }
        }
    }

    return mergeDeep(target, ...sources);
}

window.ListSelector = function (opt = {}) {
    let selectedIds = [];
    let selectedList = [];
    let onSelectedChange = null;
    let selectMode = 'MULTIPLE';
    let dataList = [];

    const options = {
        maxSelectedItems: 5,
        ...opt
    };

    function normalize(dataList) {
        return dataList.map(d => {
            d.id = parseInt(d.id);
            return d;
        });
    }

    function selectedChangeEvent() {
        if (onSelectedChange) {
            onSelectedChange(dataList, selectedIds);
        }

        selectedList = selectedList.filter((d) => selectedIds.includes(d.id));

        selectedIds.forEach((id) => {
            const data = dataList.find(d => d.id === id);
            const exist = selectedList.find(d => d.id === id);

            data && !exist && selectedList.push(data);
        });
    }

    function deselect(id, withEvent = true) {
        id = parseInt(id);

        if (selectedIds.indexOf(id) < 0) {
            return;
        }

        selectedIds.splice(selectedIds.indexOf(id), 1);
        withEvent && selectedChangeEvent();
    }

    function isSelectMultiple() {
        return selectMode === 'MULTIPLE';
    }

    function isSelectSingle() {
        return selectMode === 'SINGLE';
    }

    function setSelectMode(mode) {
        selectMode = mode;
    }

    function limitedSelections() {
        if (!options.maxSelectedItems) {
            return false;
        }

        return selectedIds.length >= options.maxSelectedItems;
    }

    function select(id, withEvent = true) {
        id = parseInt(id);

        // Remove if existed
        if (selectedIds.includes(id) && isSelectMultiple()) {
            deselect(id, false);
            withEvent && selectedChangeEvent();
            return;
        }

        if (limitedSelections()) {
            return;
        }

        const selectedData = dataList.find((d) => d.id === id);

        if (!selectedData) {
            return;
        }

        if (selectedData.is_disabled) {
            return;
        }

        // Add to selectedList
        if (isSelectMultiple()) {
            selectedIds.push(id);
            withEvent && selectedChangeEvent();
            return;
        }

        // Select single
        selectedIds = [id];
        withEvent && selectedChangeEvent();
    }

    return {
        pushData: function (...data) {
            data = normalize(dataList);
            data.forEach((d) => {
                if (this.getListIds().includes(d.id)) {
                    return true;
                }

                dataList.push(d);
            });
        },
        setData: function (data) {
            dataList = normalize(data);
        },
        select,
        selects: function (ids) {
            ids = ids.filter(function (item, pos) {
                return ids.indexOf(item) === pos;
            });

            ids.forEach(id => deselect(id, false));
            ids.forEach(id => select(id, false));
            selectedChangeEvent();
        },
        deselectAll: function () {
            selectedIds = [];
            selectedChangeEvent();
        },
        deselects: function (ids) {
            ids = ids.filter(function (item, pos) {
                return ids.indexOf(item) === pos;
            });

            // console.log("To Deselect", ids);
            // console.log("Selected list", this.getSelectedIds());
            ids.forEach(id => deselect(id, false));
            selectedChangeEvent();
        },
        selectAll: function () {
            dataList.forEach((item) => select(item.id, false));
            selectedChangeEvent();
        },
        getSelectedList: () => selectedList,
        getDataList: function () {
            return dataList;
        },
        getListIds: function () {
            return dataList.map(item => item.id);
        },
        setOnSelectedChange: function (f) {
            onSelectedChange = f;
        },
        getSelectedIds: function () {
            return selectedIds;
        },
        limitedSelections,
        hasLimitSelection: () => options.maxSelectedItems > 0,
        isSelectMultiple,
        isSelectSingle,
        maxSelectedItems: () => options.maxSelectedItems,
        setSelectMode
    };
}

window.FileObjectManager = (function () {
    let container;
    let listContainer;
    let options = {
        useSelector: true,
        selectors: {
            list: '#file-object-list',
            manager: '#file-object-manager',
            listJson: '.file-object-list-json',
            selectCurrents: '.fom-select-currents',
            deselectCurrents: '.fom-deselect-currents',
            deselectAll: '.fom-deselect-all',
            selectingStatus: '.fom-selecting-status',
            refreshList: '.fom-refresh-list',
        },
        list: {
            pagination: {
                page: 1,
                limit: 15
            },
            selectMode: 'SINGLE',
            maxSelectedItems: 0,
        },
        routes: {
            components: {
                list: '/file-object-manager/components/list',
                manager: '/file-object-manager/components/manager',
            }
        },
    };
    const currentPagination = {
        page: options.list.pagination.page,
        limit: options.list.pagination.limit,
    };
    const states = {
        list: 'LOADING',
    };
    let listSelector = ListSelector();
    let jsonData = [];

    async function loadList(page, limit) {
        listContainer = document.querySelector(options.selectors.list);
        listContainer.classList.toggle('with-selector', options.useSelector);

        const url = `${options.routes.components.list}?page=${page}&limit=${limit}`;
        currentPagination.page = page;
        currentPagination.limit = limit;

        toggleLoadingList(true);
        const response = await fetch(url);
        listContainer.innerHTML = await response.text();
        toggleLoadingList(false);
        setTimeout(() => {
            jsonData = JSON.parse(listContainer.querySelector(options.selectors.listJson).innerText);
            listSelector.setData(jsonData);
            options.useSelector && renderSelected();
            options.useSelector && registerSelectorButtons();
        }, 1); // Just for sure
    }

    async function loadManager() {
        const url = `${options.routes.components.manager}`;

        const response = await fetch(url);
        container.innerHTML = await response.text();
    }

    function renderSelected() {
        const selectedIds = listSelector.getSelectedIds();

        listContainer.querySelectorAll('.file-object').forEach((f) => f.classList.remove("selected"));

        selectedIds.forEach((id) => {
            listContainer.querySelector(`#file-object-${id}`)?.classList.add("selected");
        });

        if (listSelector.limitedSelections()) {
            listSelector.getDataList().filter(d => !selectedIds.includes(d.id)).forEach((d) => {
                listContainer.querySelector(`#file-object-${d.id}`)?.classList.add("disabled");
            });
        } else {
            listSelector.getDataList().filter(d => !selectedIds.includes(d.id)).forEach((d) => {
                listContainer.querySelector(`#file-object-${d.id}`)?.classList.remove("disabled");
            });
        }

        if (options.useSelector) {
            listContainer.querySelectorAll(options.selectors.selectingStatus).forEach((d) => {
                let maxSelecting = '';

                if (listSelector.isSelectMultiple() && listSelector.hasLimitSelection()) {
                    maxSelecting = `of ${listSelector.maxSelectedItems()}`;
                }

                d.innerHTML = `Selecting ${selectedIds.length} ${maxSelecting} items`;
            });
        }

        renderDisabled();
    }

    function renderDisabled() {
        listSelector.getDataList().filter(d => d.is_disabled === true).forEach((d) => {
            listContainer.querySelector(`#file-object-${d.id}`)?.classList.add("disabled");
        });
    }

    async function reloadList() {
        await loadList(currentPagination.page, currentPagination.limit);
    }

    function toggleLoadingList(show) {
        if (show) {
            listContainer.innerHTML = 'Loading File Objects . . .';
            states.list = 'LOADING';
        }
    }

    async function loadManagerUI() {
        await loadManager();
        await loadList(options.list.pagination.page, options.list.pagination.limit);
    }

    function initSelector() {
        console.log('Init selector');
        listSelector = ListSelector({
            maxSelectedItems: options.list.maxSelectedItems
        });
        listSelector.setOnSelectedChange(renderSelected);
        listSelector.setSelectMode(options.list.selectMode);
    }

    function registerSelectorButtons() {
        document.querySelectorAll(options.selectors.selectCurrents).forEach(box => {
            box.addEventListener('click', () => {
                listSelector.selects(listSelector.getDataList().map((d) => d.id));
            });
        });
        document.querySelectorAll(options.selectors.deselectAll).forEach(box => {
            box.addEventListener('click', () => {
                listSelector.deselectAll();
            });
        });
        document.querySelectorAll(options.selectors.deselectCurrents).forEach(box => {
            box.addEventListener('click', () => {
                listSelector.deselects(listSelector.getDataList().map((d) => d.id));
            });
        });
        document.querySelectorAll(options.selectors.refreshList).forEach(box => {
            box.addEventListener('click', async () => {
                await reloadList();
            });
        });
        listContainer.querySelectorAll('.file-object').forEach((f) => {
            f.addEventListener('click', (e) => {
                e.preventDefault();
                FileObjectManager.listSelector().select(f.getAttribute('data-file-object-id'));
            });
        });
    }

    return {
        init: async function (selector, opt = {}) {
            mergeDeep(options, opt);
            container = document.querySelector(selector || options.selectors.manager);
            await loadManagerUI();

            // Must call after load UI Manager
            options.useSelector && initSelector({
                maxSelectedItems: options.list.maxSelectedItems
            });
        },
        reloadList,
        loadList,
        listSelector: () => listSelector,
    };
})();

